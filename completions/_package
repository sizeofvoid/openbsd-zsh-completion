#compdef pkg_add pkg_create pkg_info pkg_sign pkg_check pkg_delete pkg_mklocatedb proot
#  ___(_)_______  ___  / _|_   _____ (_) __| |  ___  _ __ __ _
# / __| |_  / _ \/ _ \| |_\ \ / / _ \| |/ _` | / _ \| '__/ _` |
# \__ \ |/ /  __/ (_) |  _|\ V / (_) | | (_| || (_) | | | (_| |
# |___/_/___\___|\___/|_|   \_/ \___/|_|\__,_(_)___/|_|  \__, |
#                                                Dotfils |___/
#
# Copyright (c) 2016, Rafael Sadowski <rafael |AT| sizeofvoid.org>
# Licensed under the ISC license.
#

_supported_platforms()
{
	_arch_list=(
		'alpha: Digital Alpha-based systems'
		'armv7: Various ARMv7 based systems.'
		'amd64: AMD64-based systems'
		'armish: ARM-based appliances (by Thecus, IO-DATA, and others)'
		'hppa: Hewlett-Packard Precision Architecture (PA-RISC) systems'
		'i386:  Standard PC and clones based on the Intel i386 architecture and compatible processors'
		'landisk: IO-DATA Landisk systems (such as USL-5P) based on the SH4 cpu'
		'loongson: Loongson 2E- and 2F-based systems, such as the Lemote Fuloong and Yeeloong, Gdium Liberty, etc.:'
		'luna88k: Omron LUNA-88K and LUNA-88K2 workstations'
		'macppc: Apple New World PowerPC-based machines, from the iMac onwards'
		'octeon: Cavium Octeon-based MIPS64 systems'
		'sgi: SGI MIPS-based workstations'
		'socppc: Freescale PowerPC SoC-based machines'
		'sparc: Sun sun4, sun4c, sun4e and sun4m class SPARC systems'
		'sparc64: Sun UltraSPARC and Fujitsu SPARC64 systems'
		'zaurus: Sharp Zaurus C3x00 PDAs'
	)

	_describe 'arch list' _arch_list
}


_pkg_add_completion()
{
	_distribution_typs=('cdrom' 'ftp')
	_keywords=('allversions' 'arch' 'dontmerge' 'donttie' 'downgrade' 'FW_UPDATE'
		'installed' 'libdepends' 'nonroot' 'nosig' 'paranoid' 'repair'
		'scripts' 'SIGNER' 'unsigned' 'updatedepends')
	_arguments -s -C \
		'-a[automated package installation]' \
		'-c[while replacing packages, delete extra configuration file in the old package]' \
		'-I[force non-interactive mode]' \
		'-i[force interactive mode]' \
		'-m[always display the progress meter]' \
		'-n[dont actually install a package, just report the steps]' \
		'-q[replace package quickly]' \
		'-r[replace existing packages]' \
		'-s[dont actually install packages, skip as many steps as needed and report only the disk size changes that would happen]' \
		'-U[update dependencies if required before installing the new package(s)]' \
		'-u[update the given installed pkgname(s), and anything it depends upon]' \
		'-v[turn on verbose output]' \
		'-x[disable progress meter]' \
		'-z[fuzzy package addition]' \
		'-A[arch]:arch:_supported_platforms' \
		'-B[set pkg-destdir as the prefix to prepend to any object extracted from the package]:pkgdistdir:_files -/' \
		'-L[set localbase]:localbase:_files -/' \
		'-l[installs packages from the raw output of pkg_info(1)]:file:_files' \
		'-P[check permissions for distribution]:tpye:((${(q)_distribution_typs}))' \
		'-D[force installation of the package]:keyword:((${(q)_keywords}))' \
}

_pkg_create_completion()
{
}

_pkg_info_completion()
{
}

_pkg_sign_completion()
{
}

_pkg_check_completion()
{
}

_pkg_delete_completion()
{
	_arguments -s -C \
		'-a[Delete unused dependencies]' \
		'-c[Delete extra configuration files (@extra file)]' \
		'-I[Force non-interactive mode]' \
		'-i[Force interactive mode]' \
		'-m[]' \
		'-n[]' \
		'-q[Delete package quickly]' \
		'-s[Dont deinstall package, only report the disk size changes]' \
		'-v[Turn on verbose output]' \
		'-X[Delete everything]' \
		'-x[Disable progress meter]' \
		'-B[]' \
		'-D[]' \
}

_pkg_mklocatedb_completion()
{
}

_pkg_proot_completion()
{
}

_package() {
    local state line curcontext="$curcontext"
    case $service in
	pkg_add) _pkg_add_completion;;
	pkg_create) _pkg_create_completion;;
	pkg_info) _pkg_info_completion;;
	pkg_sign) _pkg_sign_completion;;
	pkg_check) _pkg_check_completion;;
	pkg_delete) _pkg_delete_completion;;
	pkg_mklocatedb) _pkg_mklocatedb_completion;;
	proot) _pkg_proot_completion;;
        *) _message "Err not my business";;
    esac
}

_package "$@"
